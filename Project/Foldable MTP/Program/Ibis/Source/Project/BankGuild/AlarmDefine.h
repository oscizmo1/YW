#pragma once

#define ALM_INDEX_SKIP		1000
// Alarm 번호로 Part와 Unit을 구분한다
// Motor Alarm은 축당 2EA 이상이 될 수 있으므로 항상 몇칸 비워둔다
enum ALARM_ID
{
	// Error 없는 상태
	ALM_NONE,

	//////////////////////////////////////////////////////////////////////////
	// Shuttle 1
	ALM_SHUTTLE1_PART			= 1000,
	ALM_SHUTTLE1_LIGHT_CURTAIN	= 1001,
	ALM_AXIS_JIG_SHUTTLE_Y1		= 1100,
	ALM_AXIS_INSPECTION_Z1		= 1101,
	ALM_AXIS_INSPECTION_X1		= 1102,

	ALM_SHUTTLE_1_TILT_UP		= 1200,
	ALM_SHUTTLE_1_TILT_DOWN		= 1201,

	ALM_AXIS_JIG_SHUTTLE_1_NOT_MCR_POSITION = 1600,
	ALM_SHUTTLE_1_VAC_FAIL_CH1				= 1601,
	ALM_SHUTTLE_1_VAC_FAIL_CH2				= 1602,
	ALM_SHUTTLE_1_INVALID_TIME_OVER			= 1603,
	ALM_AXIS_INSPECTION_Z1_NOT_UP_POSITION	= 1604,
	ALM_SHUTTLE_1_JOB_INVALID				= 1605,
	ALM_SHUTTLE_1_CELLINFO_NG				= 1606,
	
	//kjpark 20171010 TMD March 구현
	ALM_SHUTTLE_1_TMD_NG_CH1				= 1650,
	ALM_SHUTTLE_1_TMD_NG_CH2				= 1651,

	ALM_SHUTTLE_1_PDT_ABLE_CHECK		= 1700,
	ALM_SHUTTLE_1_PDT_START_CHECK		= 1701,
	ALM_SHUTTLE_1_PDT_VAC_ON_REQ_CHECK	= 1702,
	ALM_SHUTTLE_1_PDT_VAC_OFF_REQ_CHECK	= 1703,
	ALM_SHUTTLE_1_PDT_COMPLETE_CHECK	= 1704,
	ALM_SHUTTLE_1_PDT_BIT_CLEAR_CHECK	= 1705,
	ALM_SHUTTLE_1_PDT_ROBOT_STOP		= 1706,
	//////////////////////////////////////////////////////////////////////////
	// Shuttle 2
	ALM_SHUTTLE2_PART			= 2000,
	ALM_SHUTTLE2_LIGHT_CURTAIN	= 2001,
	ALM_AXIS_JIG_SHUTTLE_Y2		= 2100,
	ALM_AXIS_INSPECTION_Z2		= 2101,
	ALM_AXIS_INSPECTION_X2		= 2102,

	ALM_SHUTTLE_2_TILT_UP		= 2200,
	ALM_SHUTTLE_2_TILT_DOWN		= 2201,

	ALM_AXIS_JIG_SHUTTLE_2_NOT_MCR_POSITION = 2600,
	ALM_SHUTTLE_2_VAC_FAIL_CH1				= 2601,
	ALM_SHUTTLE_2_VAC_FAIL_CH2				= 2602,
	ALM_SHUTTLE_2_INVALID_TIME_OVER			= 2603,
	ALM_AXIS_INSPECTION_Z2_NOT_UP_POSITION	= 2604,
	ALM_SHUTTLE_2_JOB_INVALID				= 2605,
	ALM_SHUTTLE_2_CELLINFO_NG				= 2606,

	//kjpark 20171010 TMD March 구현
	ALM_SHUTTLE_2_TMD_NG_CH1				= 2650,
	ALM_SHUTTLE_2_TMD_NG_CH2				= 2651,

	ALM_SHUTTLE_2_PDT_ABLE_CHECK		= 2700,
	ALM_SHUTTLE_2_PDT_START_CHECK		= 2702,
	ALM_SHUTTLE_2_PDT_VAC_ON_REQ_CHECK	= 2702,
	ALM_SHUTTLE_2_PDT_VAC_OFF_REQ_CHECK	= 2703,
	ALM_SHUTTLE_2_PDT_COMPLETE_CHECK	= 2704,
	ALM_SHUTTLE_2_PDT_BIT_CLEAR_CHECK	= 2705,
	ALM_SHUTTLE_2_PDT_ROBOT_STOP		= 2706,
	//////////////////////////////////////////////////////////////////////////
	// Shuttle 3
	ALM_SHUTTLE3_PART			= 3000,
	ALM_SHUTTLE3_LIGHT_CURTAIN	= 3001,

	ALM_AXIS_JIG_SHUTTLE_3_NOT_MCR_POSITION = 3600,
	ALM_SHUTTLE_3_VAC_FAIL_CH1				= 3601,
	ALM_SHUTTLE_3_VAC_FAIL_CH2				= 3602,
	ALM_SHUTTLE_3_INVALID_TIME_OVER			= 3603,
	ALM_SHUTTLE_3_JOB_INVALID				= 3605,
	ALM_SHUTTLE_3_CELLINFO_NG				= 3606,

	//kjpark 20171010 TMD March 구현
	ALM_SHUTTLE_3_TMD_NG_CH1				= 3650,
	ALM_SHUTTLE_3_TMD_NG_CH2				= 3651,

	ALM_SHUTTLE_3_PDT_ABLE_CHECK		= 3700,
	ALM_SHUTTLE_3_PDT_START_CHECK		= 3703,
	ALM_SHUTTLE_3_PDT_VAC_ON_REQ_CHECK	= 3702,
	ALM_SHUTTLE_3_PDT_VAC_OFF_REQ_CHECK	= 3703,
	ALM_SHUTTLE_3_PDT_COMPLETE_CHECK	= 3704,
	ALM_SHUTTLE_3_PDT_BIT_CLEAR_CHECK	= 3705,
	ALM_SHUTTLE_3_PDT_ROBOT_STOP		= 3706,
	//////////////////////////////////////////////////////////////////////////
	// GPS 등 설비 파트 지정 애매한것들
	ALM_COMMON_PART				= 4000,
	ALM_MC_POWER_OFF			= 4001,
	ALM_SAFTY_KEY_TEACH			= 4002,

	ALM_UTIL_BOX_TEMP_ALARM		= 4100,
	ALM_ETC_BOX_TEMP_ALARM		= 4101,
	ALM_OP_PC_TEMP_ALARM		= 4102,
	ALM_ALIGN_PG_PC_TEMP_ALARM	= 4103,
	ALM_SERVO_BOX_TEMP_ALARM	= 4104,

	ALM_FRONT_EMS_SWITCH		= 4200,
	ALM_LEFT_EMS_SWITCH			= 4201,
	ALM_BACK_DOOR_EMS_SWITCH	= 4202,
	ALM_RIGHT_EMS_SWITCH		= 4203,
	ALM_MANUAL_MODE_EMS_SWITCH	= 4204,

	ALM_UTIL_BOX_FAN_ALARM		= 4300,
	ALM_ETC_BOX_FAN_ALARM		= 4301,
	ALM_OP_PC_FAN_ALARM			= 4302,
	ALM_SIGNAL_PC_FAN_ALARM		= 4303,
	ALM_SERVO_BOX_FAN_ALARM		= 4304,

	ALM_FRONT_DOOR1_SENSOR		= 4400,
	ALM_FRONT_DOOR2_SENSOR		= 4401,
	ALM_RIGHT_DOOR_SENSOR		= 4402,
	ALM_LEFT_DOOR_SENSOR		= 4403,
	ALM_BACK_DOOR1_SENSOR		= 4404,
	ALM_BACK_DOOR2_SENSOR		= 4405,

	//kjparkk 20180131 PDT AB RULE 체크 기능 추가
	ALM_PDT_AB_RULE_MISMATCH	= 4500,

	ALM_MTP_ALARM_END			= 5000,

	// PDT에서 주는 Robot Alarm Code
	// 30000번 부터는 PDT에서 주는 별도 파일로 관리된다 (500개) [12/11/2017 OSC]
	ALM_ROBOT_ALARM_START		= 30000,

	ALM_MAX = 31000
};

enum ALARM_LEVEL
{
	ALARM_LEVEL_WARNING,		// 설비 정지하지않고 알림만 띄우는 ALARM
	ALARM_LEVEL_CHECK,			// RESTART중에 발생하여 실제 보고를 안하는 알람
	ALARM_LEVEL_ALARM,			// 설비가 FAULT상태로 정지되는 ALARM
	ALARM_LEVEL_PASSWORD,		// 설비가 FAULT되고 Password를 입력 안하면 Reset 못하는 ALARM
	ALARM_LEVEL_MAX
};

struct ALARM_MSG
{
	ALARM_LEVEL nAlarmLevel;
	CString strName[LAN_MAX];
	CString strCause[LAN_MAX];		// 발생원인
	CString strMethod[LAN_MAX];	// 해결방법
};

//kjaprk 20170911 통계 Alarm UI 12시간 타임으로 변경
typedef    struct
{
	CString			 Alarm_name;		
	CString				 nLevel;
} alarm_current[ALM_MAX];

struct ALARM_LOG_DATA
{
	int nCount;
	CTimeSpan span;


	bool operator <(const ALARM_LOG_DATA &src)
	{
		return nCount < src.nCount;
	}
	bool operator >(const ALARM_LOG_DATA &src)
	{
		return nCount > src.nCount;
	}
};