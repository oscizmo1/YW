#include "StdAfx.h"
#include "IOParamBank.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

CIOParam::CIOParam(void)
{
	m_Check = CHECK_TYPE_A;
}


CIOParam::~CIOParam(void)
{
}

BOOL CIOParam::ReturnOn()
{
	// Input일 경우 B접은 Off되어야 감지. Output일 경우 Off해야 동작
	// Input일 경우 A접은 On되어야 감지. Output일 경우 On해야 동작
	return (m_Check == CHECK_TYPE_A) ? TRUE:FALSE;
}

BOOL CIOParam::ReturnOff()
{
	// Input일 경우 B접은 Off되어야 감지. Output일 경우 Off해야 동작
	// Input일 경우 A접은 On되어야 감지. Output일 경우 On해야 동작
	return (m_Check == CHECK_TYPE_A) ? FALSE:TRUE;
}

BOOL CIOParam::ReturnFrom( VAC_STATE vac )
{
	return vac == VAC_ON ? ReturnOn():ReturnOff();
}

BOOL CIOParam::ReturnFrom( CYL_STATE cyl )
{
	if( (cyl == CYL_FWD) && (cyl == CYL_DOWN) )
		return ReturnOn();
	else
		return ReturnOff();
}

BOOL CIOParam::GetIOCheck(ONOFF value)
{
	BOOL bRet = FALSE;
	if(value == ON)
	{
		bRet = ReturnOn();
	}
	else
	{
		bRet = ReturnOff();
	}
	//return value == ON ? ReturnOn():ReturnOff();
	return bRet;
}

BOOL CIOParam::GetIOCheck(BOOL bValue)
{
	BOOL bRet = FALSE;
	if(bValue == TRUE)
	{
		bRet = ReturnOn();
	}
	else
	{
		bRet = ReturnOff();
	}
	//return value == ON ? ReturnOn():ReturnOff();
	return bRet;
}








CIOParamBank::CIOParamBank( void )
{

}

CIOParamBank::~CIOParamBank( void )
{

}

void CIOParamBank::InitializeIOParam()
{
	// 미사용 I/O도 있으니 기본 I/O No.로 일단 이름지어놓는다
	for(int i = 0; i < MAX_IN_ID; i++)
	{
		m_In[i].m_strIOAddress.Format(_T("X_%03X"), i);
		m_In[i].m_strIOName.Format(_T("X_%03X"), i);
	}
	for(int i = 0; i < MAX_OUT_ID; i++)
	{
		m_Out[i].m_strIOAddress.Format(_T("Y_%03X"), i);
		m_Out[i].m_strIOName.Format(_T("Y_%03X"), i);
	}

	InitializeIOParam_IN();
	InitializeIOParam_OUT();
}

void CIOParamBank::InitializeIOParam_IN()
{
	// X0000~X000F
	m_In[X_FRONT_DOOR1_SENSOR].m_strIOName = _T("X_FRONT_DOOR1_SENSOR");
	m_In[X_FRONT_DOOR1_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_FRONT_DOOR2_SENSOR].m_strIOName = _T("X_FRONT_DOOR2_SENSOR");
	m_In[X_FRONT_DOOR2_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_RIGNT_DOOR_SENSOR].m_strIOName = _T("X_RIGNT_DOOR_SENSOR");
	m_In[X_RIGNT_DOOR_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_BACK_DOOR1_SENSOR].m_strIOName = _T("X_BACK_DOOR1_SENSOR");
	m_In[X_BACK_DOOR1_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_BACK_DOOR2_SENSOR].m_strIOName = _T("X_BACK_DOOR2_SENSOR");
	m_In[X_BACK_DOOR2_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_LEFT_DOOR_SENSOR].m_strIOName = _T("X_LEFT_DOOR_SENSOR");
	m_In[X_LEFT_DOOR_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_OP_RESET_SW].m_strIOName = _T("X_OP_RESET_SW");
	m_In[X_OP_RESET_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_AUTO_TEACH_KEY].m_strIOName = _T("X_AUTO_TEACH_KEY");
	m_In[X_AUTO_TEACH_KEY].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_LIGHT_CURTAIN].m_strIOName = _T("X_SHUTTLE_1_LIGHT_CURTAIN");
	m_In[X_SHUTTLE_1_LIGHT_CURTAIN].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_PC_RACK_DOOR_OPEN].m_strIOName = _T("X_PC_RACK_DOOR_OPEN");
	m_In[X_PC_RACK_DOOR_OPEN].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_SHUTTLE_2_LIGHT_CURTAIN].m_strIOName = _T("X_SHUTTLE_2_LIGHT_CURTAIN");
	m_In[X_SHUTTLE_2_LIGHT_CURTAIN].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_LIGHT_CURTAIN].m_strIOName = _T("X_SHUTTLE_3_LIGHT_CURTAIN");
	m_In[X_SHUTTLE_3_LIGHT_CURTAIN].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_TABLE_STO1].m_strIOName = _T("X_SHUTTLE_TABLE_STO1");
	m_In[X_SHUTTLE_TABLE_STO1].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_TABLE_STO2].m_strIOName = _T("X_SHUTTLE_TABLE_STO2");
	m_In[X_SHUTTLE_TABLE_STO2].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_BACK_DOOR_EMS_SWITCH].m_strIOName = _T("X_BACK_DOOR_EMS_SWITCH");
	m_In[X_BACK_DOOR_EMS_SWITCH].m_Check = CIOParam::CHECK_TYPE_A;

	// X0010~X001F
	m_In[X_FRONT_EMS_SWITCH].m_strIOName = _T("X_FRONT_EMS_SWITCH");
	m_In[X_FRONT_EMS_SWITCH].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_RIGHT_EMS_SWITCH].m_strIOName = _T("X_RIGHT_EMS_SWITCH");
	m_In[X_RIGHT_EMS_SWITCH].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_PC_RACK_EMS_SWITCH].m_strIOName = _T("X_PC_RACK_EMS_SWITCH");
	m_In[X_PC_RACK_EMS_SWITCH].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_LEFT_EMS_SWITCH].m_strIOName = _T("X_LEFT_EMS_SWITCH");
	m_In[X_LEFT_EMS_SWITCH].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_UTIL_BOX_TEMP_ALARM].m_strIOName = _T("X_UTIL_BOX_TEMP_ALARM");
	m_In[X_UTIL_BOX_TEMP_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_UTIL_BOX_FIRE_ALARM].m_strIOName = _T("X_UTIL_BOX_FIRE_ALARM");
	m_In[X_UTIL_BOX_FIRE_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SNC_SMPS1_ON_CHECK].m_strIOName = _T("X_SNC_SMPS1_ON_CHECK");
	m_In[X_SNC_SMPS1_ON_CHECK].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SNC_SMPS2_ON_CHECK].m_strIOName = _T("X_SNC_SMPS2_ON_CHECK");
	m_In[X_SNC_SMPS2_ON_CHECK].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_C_BOX_A_TEMP_ALARM].m_strIOName = _T("X_C_BOX_A_TEMP_ALARM");
	m_In[X_C_BOX_A_TEMP_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_C_BOX_A_FIRE_ALARM].m_strIOName = _T("X_C_BOX_A_FIRE_ALARM");
	m_In[X_C_BOX_A_FIRE_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_OP_PC_TEMP_ALARM].m_strIOName = _T("X_OP_PC_TEMP_ALARM");
	m_In[X_OP_PC_TEMP_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MC_ON_CHECK].m_strIOName = _T("X_MC_ON_CHECK");
	m_In[X_MC_ON_CHECK].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SIGNAL_PC_TEMP_ALARM].m_strIOName = _T("X_SIGNAL_PC_TEMP_ALARM");
	m_In[X_SIGNAL_PC_TEMP_ALARM].m_Check = CIOParam::CHECK_TYPE_A;

	// X0020~X002F
	m_In[X_SHUTTLE_1_VACCUM_ON_SW].m_strIOName = _T("X_SHUTTLE_1_VACCUM_ON_SW");
	m_In[X_SHUTTLE_1_VACCUM_ON_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_VACCUM_OFF_SW].m_strIOName = _T("X_SHUTTLE_1_VACCUM_OFF_SW");
	m_In[X_SHUTTLE_1_VACCUM_OFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_PATTERN_BACK_SW].m_strIOName = _T("X_SHUTTLE_1_PATTERN_BACK_SW");
	m_In[X_SHUTTLE_1_PATTERN_BACK_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_PATTERN_NEXT_SW].m_strIOName = _T("X_SHUTTLE_1_PATTERN_NEXT_SW");
	m_In[X_SHUTTLE_1_PATTERN_NEXT_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_PATTERN_ONOFF_SW].m_strIOName = _T("X_SHUTTLE_1_PATTERN_ONOFF_SW");
	m_In[X_SHUTTLE_1_PATTERN_ONOFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_VACCUM_READY_SW].m_strIOName = _T("X_SHUTTLE_1_VACCUM_READY_SW");
	m_In[X_SHUTTLE_1_VACCUM_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_1_PATTERN_READY_SW].m_strIOName = _T("X_SHUTTLE_1_PATTERN_READY_SW");
	m_In[X_SHUTTLE_1_PATTERN_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_VACCUM_ON_SW].m_strIOName = _T("X_SHUTTLE_2_VACCUM_ON_SW");
	m_In[X_SHUTTLE_2_VACCUM_ON_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_VACCUM_OFF_SW].m_strIOName = _T("X_SHUTTLE_2_VACCUM_OFF_SW");
	m_In[X_SHUTTLE_2_VACCUM_OFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_PATTERN_BACK_SW].m_strIOName = _T("X_SHUTTLE_2_PATTERN_BACK_SW");
	m_In[X_SHUTTLE_2_PATTERN_BACK_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_PATTERN_NEXT_SW].m_strIOName = _T("X_SHUTTLE_2_PATTERN_NEXT_SW");
	m_In[X_SHUTTLE_2_PATTERN_NEXT_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_PATTERN_ONOFF_SW].m_strIOName = _T("X_SHUTTLE_2_PATTERN_ONOFF_SW");
	m_In[X_SHUTTLE_2_PATTERN_ONOFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_VACCUM_READY_SW].m_strIOName = _T("X_SHUTTLE_2_VACCUM_READY_SW");
	m_In[X_SHUTTLE_2_VACCUM_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_2_PATTERN_READY_SW].m_strIOName = _T("X_SHUTTLE_2_PATTERN_READY_SW");
	m_In[X_SHUTTLE_2_PATTERN_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;

	// X0030~X003F
	m_In[X_SHUTTLE_3_VACCUM_ON_SW].m_strIOName = _T("X_SHUTTLE_3_VACCUM_ON_SW");
	m_In[X_SHUTTLE_3_VACCUM_ON_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_VACCUM_OFF_SW].m_strIOName = _T("X_SHUTTLE_3_VACCUM_OFF_SW");
	m_In[X_SHUTTLE_3_VACCUM_OFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_PATTERN_BACK_SW].m_strIOName = _T("X_SHUTTLE_3_PATTERN_BACK_SW");
	m_In[X_SHUTTLE_3_PATTERN_BACK_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_PATTERN_NEXT_SW].m_strIOName = _T("X_SHUTTLE_3_PATTERN_NEXT_SW");
	m_In[X_SHUTTLE_3_PATTERN_NEXT_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_PATTERN_ONOFF_SW].m_strIOName = _T("X_SHUTTLE_3_PATTERN_ONOFF_SW");
	m_In[X_SHUTTLE_3_PATTERN_ONOFF_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_VACCUM_READY_SW].m_strIOName = _T("X_SHUTTLE_3_VACCUM_READY_SW");
	m_In[X_SHUTTLE_3_VACCUM_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE_3_PATTERN_READY_SW].m_strIOName = _T("X_SHUTTLE_3_PATTERN_READY_SW");
	m_In[X_SHUTTLE_3_PATTERN_READY_SW].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR1_READY_SIGNAL].m_strIOName = _T("X_MCR1_READY_SIGNAL");
	m_In[X_MCR1_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR2_READY_SIGNAL].m_strIOName = _T("X_MCR2_READY_SIGNAL");
	m_In[X_MCR2_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR3_READY_SIGNAL].m_strIOName = _T("X_MCR3_READY_SIGNAL");
	m_In[X_MCR3_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR4_READY_SIGNAL].m_strIOName = _T("X_MCR4_READY_SIGNAL");
	m_In[X_MCR4_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR5_READY_SIGNAL].m_strIOName = _T("X_MCR5_READY_SIGNAL");
	m_In[X_MCR5_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MCR6_READY_SIGNAL].m_strIOName = _T("X_MCR6_READY_SIGNAL");
	m_In[X_MCR6_READY_SIGNAL].m_Check = CIOParam::CHECK_TYPE_A;
	

	// X0040~X004F
	m_In[X_SHUTTLE1_CH1_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE1_CH1_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE1_CH1_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE1_CH2_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE1_CH2_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE1_CH2_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE2_CH3_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE2_CH3_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE2_CH3_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE2_CH4_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE2_CH4_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE2_CH4_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE3_CH5_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE3_CH5_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE3_CH5_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_SHUTTLE3_CH6_VACCUM_ON_SENSOR].m_strIOName = _T("X_SHUTTLE3_CH6_VACCUM_ON_SENSOR");
	m_In[X_SHUTTLE3_CH6_VACCUM_ON_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_MAIN_AIR_PRESURE_SENSOR].m_strIOName = _T("X_MAIN_AIR_PRESURE_SENSOR");
	m_In[X_MAIN_AIR_PRESURE_SENSOR].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_C_BOX_B_TEMP_ALARM].m_strIOName = _T("X_C_BOX_B_TEMP_ALARM");
	m_In[X_C_BOX_B_TEMP_ALARM].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_C_BOX_B_FIRE_ALARM].m_strIOName = _T("X_C_BOX_B_FIRE_ALARM");
	m_In[X_C_BOX_B_FIRE_ALARM].m_Check = CIOParam::CHECK_TYPE_A;

	// X0050~X005F
	m_In[X_HOT_LINE_PDT_ALIVE].m_strIOName = _T("X_HOT_LINE_PDT_ALIVE");
	m_In[X_HOT_LINE_PDT_ALIVE].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_HOT_LINE_PDT_EMERGENCY].m_strIOName = _T("X_HOT_LINE_PDT_EMERGENCY");
	m_In[X_HOT_LINE_PDT_EMERGENCY].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_HOT_LINE_PDT_NET_READY].m_strIOName = _T("X_HOT_LINE_PDT_NET_READY");
	m_In[X_HOT_LINE_PDT_NET_READY].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_HOT_LINE_PDT_DOOR_OPEN].m_strIOName = _T("X_HOT_LINE_PDT_DOOR_OPEN");
	m_In[X_HOT_LINE_PDT_DOOR_OPEN].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_HOT_LINE_PDT_INTERLOCK].m_strIOName = _T("X_HOT_LINE_PDT_INTERACTIVE_1");
	m_In[X_HOT_LINE_PDT_INTERLOCK].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_HOT_LINE_PDT_INTERACTIVE_2].m_strIOName = _T("X_HOT_LINE_PDT_INTERACTIVE_2");
	m_In[X_HOT_LINE_PDT_INTERACTIVE_2].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_HOT_LINE_PDT_INTERACTIVE_3].m_strIOName = _T("X_HOT_LINE_PDT_INTERACTIVE_3");
	m_In[X_HOT_LINE_PDT_INTERACTIVE_3].m_Check = CIOParam::CHECK_TYPE_A;
	m_In[X_HOT_LINE_PDT_SUB_EMO].m_strIOName = _T("X_HOT_LINE_PDT_SUB_EMO");
	m_In[X_HOT_LINE_PDT_SUB_EMO].m_Check = CIOParam::CHECK_TYPE_A;

	// X0060 ~ X006F
	m_In[X_C_BOX_B_FAN1_ALARM].m_strIOName = _T("X_C_BOX_B_FAN1_ALARM");
	m_In[X_C_BOX_B_FAN1_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_B_FAN2_ALARM].m_strIOName = _T("X_C_BOX_B_FAN2_ALARM");
	m_In[X_C_BOX_B_FAN2_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_B_FAN3_ALARM].m_strIOName = _T("X_C_BOX_B_FAN3_ALARM");
	m_In[X_C_BOX_B_FAN3_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_B_FAN4_ALARM].m_strIOName = _T("X_C_BOX_B_FAN4_ALARM");
	m_In[X_C_BOX_B_FAN4_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_A_FAN1_ALARM].m_strIOName = _T("X_C_BOX_A_FAN1_ALARM");
	m_In[X_C_BOX_A_FAN1_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_A_FAN2_ALARM].m_strIOName = _T("X_C_BOX_A_FAN2_ALARM");
	m_In[X_C_BOX_A_FAN2_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_A_FAN3_ALARM].m_strIOName = _T("X_C_BOX_A_FAN3_ALARM");
	m_In[X_C_BOX_A_FAN3_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_C_BOX_A_FAN4_ALARM].m_strIOName = _T("X_C_BOX_A_FAN4_ALARM");
	m_In[X_C_BOX_A_FAN4_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_UTIL_BOX_FAN1_ALARM].m_strIOName = _T("X_UTIL_BOX_FAN1_ALARM");
	m_In[X_UTIL_BOX_FAN1_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_UTIL_BOX_FAN2_ALARM].m_strIOName = _T("X_UTIL_BOX_FAN2_ALARM");
	m_In[X_UTIL_BOX_FAN2_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_LEFT_PC_RACK_FAN1_ALARM].m_strIOName = _T("X_LEFT_PC_RACK_FAN1_ALARM");
	m_In[X_LEFT_PC_RACK_FAN1_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_LEFT_PC_RACK_FAN2_ALARM].m_strIOName = _T("X_LEFT_PC_RACK_FAN2_ALARM");
	m_In[X_LEFT_PC_RACK_FAN2_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_LEFT_PC_RACK_FAN3_ALARM].m_strIOName = _T("X_LEFT_PC_RACK_FAN3_ALARM");
	m_In[X_LEFT_PC_RACK_FAN3_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_LEFT_PC_RACK_FAN4_ALARM].m_strIOName = _T("X_LEFT_PC_RACK_FAN4_ALARM");
	m_In[X_LEFT_PC_RACK_FAN4_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_FIGHT_PC_RACK_FAN1_ALARM].m_strIOName = _T("X_FIGHT_PC_RACK_FAN1_ALARM");
	m_In[X_FIGHT_PC_RACK_FAN1_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_FIGHT_PC_RACK_FAN2_ALARM].m_strIOName = _T("X_FIGHT_PC_RACK_FAN2_ALARM");
	m_In[X_FIGHT_PC_RACK_FAN2_ALARM].m_Check = CIOParam::CHECK_TYPE_B;

	// X0070 ~ X007F

	m_In[X_FIGHT_PC_RACK_FAN3_ALARM].m_strIOName = _T("X_FIGHT_PC_RACK_FAN3_ALARM");
	m_In[X_FIGHT_PC_RACK_FAN3_ALARM].m_Check = CIOParam::CHECK_TYPE_B;
	m_In[X_FIGHT_PC_RACK_FAN4_ALARM].m_strIOName = _T("X_FIGHT_PC_RACK_FAN4_ALARM");
	m_In[X_FIGHT_PC_RACK_FAN4_ALARM].m_Check = CIOParam::CHECK_TYPE_B;

}

void CIOParamBank::InitializeIOParam_OUT()
{
	// Y0000~Y000F
	m_Out[Y_FRONT_DOOR1_LOCK_ONOFF].m_strIOName = _T("Y_FRONT_DOOR1_LOCK_ONOFF");
	m_Out[Y_FRONT_DOOR1_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_FRONT_DOOR2_LOCK_ONOFF].m_strIOName = _T("Y_FRONT_DOOR2_LOCK_ONOFF");
	m_Out[Y_FRONT_DOOR2_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_RIGNT_DOOR_LOCK_ONOFF].m_strIOName = _T("Y_RIGNT_DOOR_LOCK_ONOFF");
	m_Out[Y_RIGNT_DOOR_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BACK_DOOR1_LOCK_ONOFF].m_strIOName = _T("Y_BACK_DOOR1_LOCK_ONOFF");
	m_Out[Y_BACK_DOOR1_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BACK_DOOR2_LOCK_ONOFF].m_strIOName = _T("Y_BACK_DOOR2_LOCK_ONOFF");
	m_Out[Y_BACK_DOOR2_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_LEFT_DOOR_LOCK_ONOFF].m_strIOName = _T("Y_LEFT_DOOR_LOCK_ONOFF");
	m_Out[Y_LEFT_DOOR_LOCK_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_OP_RESET_LAMP].m_strIOName = _T("Y_OP_RESET_LAMP");
	m_Out[Y_OP_RESET_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_LIGHT_CURTAIN_MUTING_LAMP].m_strIOName = _T("Y_SHUTTLE_1_LIGHT_CURTAIN_MUTING_LAMP");
	m_Out[Y_SHUTTLE_1_LIGHT_CURTAIN_MUTING_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_LIGHT_MUTING_ON_TO_SNC].m_strIOName = _T("Y_SHUTTLE_1_LIGHT_MUTING_ON_TO_SNC");
	m_Out[Y_SHUTTLE_1_LIGHT_MUTING_ON_TO_SNC].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_LIGHT_CURTAIN_MUTING_LAMP].m_strIOName = _T("Y_SHUTTLE_2_LIGHT_CURTAIN_MUTING_LAMP");
	m_Out[Y_SHUTTLE_2_LIGHT_CURTAIN_MUTING_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_LIGHT_MUTING_ON_TO_SNC].m_strIOName = _T("Y_SHUTTLE_2_LIGHT_MUTING_ON_TO_SNC");
	m_Out[Y_SHUTTLE_2_LIGHT_MUTING_ON_TO_SNC].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_LIGHT_CURTAIN_MUTING_LAMP].m_strIOName = _T("Y_SHUTTLE_3_LIGHT_CURTAIN_MUTING_LAMP");
	m_Out[Y_SHUTTLE_3_LIGHT_CURTAIN_MUTING_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_LIGHT_MUTING_ON_TO_SNC].m_strIOName = _T("Y_SHUTTLE_3_LIGHT_MUTING_ON_TO_SNC");
	m_Out[Y_SHUTTLE_3_LIGHT_MUTING_ON_TO_SNC].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR1_RESET].m_strIOName = _T("Y_MCR1_RESET");
	m_Out[Y_MCR1_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR2_RESET].m_strIOName = _T("Y_MCR2_RESET");
	m_Out[Y_MCR2_RESET].m_Check = CIOParam::CHECK_TYPE_A;

	// Y0010~Y001F

	m_Out[Y_MCR3_RESET].m_strIOName = _T("Y_MCR3_RESET");
	m_Out[Y_MCR3_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR4_RESET].m_strIOName = _T("Y_MCR4_RESET");
	m_Out[Y_MCR4_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR5_RESET].m_strIOName = _T("Y_MCR5_RESET");
	m_Out[Y_MCR5_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR6_RESET].m_strIOName = _T("Y_MCR6_RESET");
	m_Out[Y_MCR6_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR1_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR1_TRIGGER_ONOFF");
	m_Out[Y_MCR1_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR2_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR2_TRIGGER_ONOFF");
	m_Out[Y_MCR2_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR3_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR3_TRIGGER_ONOFF");
	m_Out[Y_MCR3_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR4_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR4_TRIGGER_ONOFF");
	m_Out[Y_MCR4_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR5_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR5_TRIGGER_ONOFF");
	m_Out[Y_MCR5_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_MCR6_TRIGGER_ONOFF].m_strIOName = _T("Y_MCR6_TRIGGER_ONOFF");
	m_Out[Y_MCR6_TRIGGER_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;

	// Y0020~Y002F
	m_Out[Y_SHUTTLE_1_VACCUM_ON_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_1_VACCUM_ON_SW_LAMP");
	m_Out[Y_SHUTTLE_1_VACCUM_ON_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_VACCUM_OFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_1_VACCUM_OFF_SW_LAMP");
	m_Out[Y_SHUTTLE_1_VACCUM_OFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_PATTERN_BACK_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_1_PATTERN_BACK_SW_LAMP");
	m_Out[Y_SHUTTLE_1_PATTERN_BACK_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_PATTERN_NEXT_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_1_PATTERN_NEXT_SW_LAMP");
	m_Out[Y_SHUTTLE_1_PATTERN_NEXT_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_1_PATTERN_ONOFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_1_PATTERN_ONOFF_SW_LAMP");
	m_Out[Y_SHUTTLE_1_PATTERN_ONOFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_VACCUM_ON_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_2_VACCUM_ON_SW_LAMP");
	m_Out[Y_SHUTTLE_2_VACCUM_ON_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_VACCUM_OFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_2_VACCUM_OFF_SW_LAMP");
	m_Out[Y_SHUTTLE_2_VACCUM_OFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_PATTERN_BACK_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_2_PATTERN_BACK_SW_LAMP");
	m_Out[Y_SHUTTLE_2_PATTERN_BACK_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_PATTERN_NEXT_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_2_PATTERN_NEXT_SW_LAMP");
	m_Out[Y_SHUTTLE_2_PATTERN_NEXT_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_2_PATTERN_ONOFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_2_PATTERN_ONOFF_SW_LAMP");
	m_Out[Y_SHUTTLE_2_PATTERN_ONOFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;

	// Y0030~Y003F
	m_Out[Y_SHUTTLE_3_VACCUM_ON_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_3_VACCUM_ON_SW_LAMP");
	m_Out[Y_SHUTTLE_3_VACCUM_ON_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_VACCUM_OFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_3_VACCUM_OFF_SW_LAMP");
	m_Out[Y_SHUTTLE_3_VACCUM_OFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_PATTERN_BACK_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_3_PATTERN_BACK_SW_LAMP");
	m_Out[Y_SHUTTLE_3_PATTERN_BACK_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_PATTERN_NEXT_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_3_PATTERN_NEXT_SW_LAMP");
	m_Out[Y_SHUTTLE_3_PATTERN_NEXT_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SHUTTLE_3_PATTERN_ONOFF_SW_LAMP].m_strIOName = _T("Y_SHUTTLE_3_PATTERN_ONOFF_SW_LAMP");
	m_Out[Y_SHUTTLE_3_PATTERN_ONOFF_SW_LAMP].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_TOWER_LAMP_RED].m_strIOName = _T("Y_TOWER_LAMP_RED");
	m_Out[Y_TOWER_LAMP_RED].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_TOWER_LAMP_YELLOW].m_strIOName = _T("Y_TOWER_LAMP_YELLOW");
	m_Out[Y_TOWER_LAMP_YELLOW].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_TOWER_LAMP_GREEN].m_strIOName = _T("Y_TOWER_LAMP_GREEN");
	m_Out[Y_TOWER_LAMP_GREEN].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BUZZER_K1].m_strIOName = _T("Y_BUZZER_K1");
	m_Out[Y_BUZZER_K1].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BUZZER_K2].m_strIOName = _T("Y_BUZZER_K2");
	m_Out[Y_BUZZER_K2].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BUZZER_K3].m_strIOName = _T("Y_BUZZER_K3");
	m_Out[Y_BUZZER_K3].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BUZZER_K4].m_strIOName = _T("Y_BUZZER_K4");
	m_Out[Y_BUZZER_K4].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_BUZZER_K5].m_strIOName = _T("Y_BUZZER_K5");
	m_Out[Y_BUZZER_K5].m_Check = CIOParam::CHECK_TYPE_A;

	// Y0040~Y004F
	m_Out[Y_SIGNAL_PC1_RESET].m_strIOName = _T("Y_SIGNAL_PC1_RESET");
	m_Out[Y_SIGNAL_PC1_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SIGNAL_PC2_RESET].m_strIOName = _T("Y_SIGNAL_PC2_RESET");
	m_Out[Y_SIGNAL_PC2_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SIGNAL_PC3_RESET].m_strIOName = _T("Y_SIGNAL_PC3_RESET");
	m_Out[Y_SIGNAL_PC3_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SIGNAL_PC4_RESET].m_strIOName = _T("Y_SIGNAL_PC4_RESET");
	m_Out[Y_SIGNAL_PC4_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SIGNAL_PC5_RESET].m_strIOName = _T("Y_SIGNAL_PC5_RESET");
	m_Out[Y_SIGNAL_PC5_RESET].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_SIGNAL_PC6_RESET].m_strIOName = _T("Y_SIGNAL_PC6_RESET");
	m_Out[Y_SIGNAL_PC6_RESET].m_Check = CIOParam::CHECK_TYPE_A;


	// Y0050~Y005F
	m_Out[SHUTTLE1_CH1_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE1_CH1_VACCUM_ONOFF");
	m_Out[SHUTTLE1_CH1_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[SHUTTLE1_CH2_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE1_CH2_VACCUM_ONOFF");
	m_Out[SHUTTLE1_CH2_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[SHUTTLE2_CH3_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE2_CH3_VACCUM_ONOFF");
	m_Out[SHUTTLE2_CH3_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[SHUTTLE2_CH4_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE2_CH4_VACCUM_ONOFF");
	m_Out[SHUTTLE2_CH4_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[SHUTTLE3_CH5_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE3_CH5_VACCUM_ONOFF");
	m_Out[SHUTTLE3_CH5_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[SHUTTLE3_CH6_VACCUM_ONOFF].m_strIOName = _T("SHUTTLE3_CH6_VACCUM_ONOFF");
	m_Out[SHUTTLE3_CH6_VACCUM_ONOFF].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_HOT_LINE_MTP_ALIVE].m_strIOName = _T("Y_HOT_LINE_MTP_ALIVE");
	m_Out[Y_HOT_LINE_MTP_ALIVE].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_HOT_LINE_MTP_EMERGENCY].m_strIOName = _T("Y_HOT_LINE_MTP_EMERGENCY");
	m_Out[Y_HOT_LINE_MTP_EMERGENCY].m_Check = CIOParam::CHECK_TYPE_B;
	m_Out[Y_HOT_LINE_MTP_NET_READY].m_strIOName = _T("Y_HOT_LINE_MTP_NET_READY");
	m_Out[Y_HOT_LINE_MTP_NET_READY].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_HOT_LINE_MTP_DOOR_OPEN].m_strIOName = _T("Y_HOT_LINE_MTP_DOOR_OPEN");
	m_Out[Y_HOT_LINE_MTP_DOOR_OPEN].m_Check = CIOParam::CHECK_TYPE_B;
	m_Out[Y_HOT_LINE_MTP_INTERLOCK].m_strIOName = _T("Y_HOT_LINE_MTP_INTERLOCK");
	m_Out[Y_HOT_LINE_MTP_INTERLOCK].m_Check = CIOParam::CHECK_TYPE_B;
	m_Out[Y_HOT_LINE_MTP_INTERACTIVE_2].m_strIOName = _T("Y_HOT_LINE_MTP_INTERACTIVE_2");
	m_Out[Y_HOT_LINE_MTP_INTERACTIVE_2].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_HOT_LINE_MTP_INTERACTIVE_3].m_strIOName = _T("Y_HOT_LINE_MTP_INTERACTIVE_3");
	m_Out[Y_HOT_LINE_MTP_INTERACTIVE_3].m_Check = CIOParam::CHECK_TYPE_A;
	m_Out[Y_HOT_LINE_MTP_SUB_EMO].m_strIOName = _T("Y_HOT_LINE_MTP_SUB_EMO");
	m_Out[Y_HOT_LINE_MTP_SUB_EMO].m_Check = CIOParam::CHECK_TYPE_A;

}

CIOParam CIOParamBank::GetInputIOParma(INPUT_ID ID)
{
	return m_In[ID];
}

CIOParam CIOParamBank::GetOutputIOParma(OUTPUT_ID ID)
{
	return m_Out[ID];
}