#pragma once


enum INPUT_ID
{
	// X0000~X000F
	X_FRONT_DOOR1_SENSOR,
	X_FRONT_DOOR2_SENSOR,
	X_RIGNT_DOOR_SENSOR,
	X_BACK_DOOR1_SENSOR,
	X_BACK_DOOR2_SENSOR, 
	X_LEFT_DOOR_SENSOR,
	X_OP_RESET_SW,
	X_AUTO_TEACH_KEY,
	X_SHUTTLE_1_LIGHT_CURTAIN,
	X_PC_RACK_DOOR_OPEN,
	X_SHUTTLE_2_LIGHT_CURTAIN,
	X_00B,
	X_SHUTTLE_3_LIGHT_CURTAIN,
	X_SHUTTLE_TABLE_STO1,
	X_SHUTTLE_TABLE_STO2,
	X_BACK_DOOR_EMS_SWITCH,


	// X010~X01F
	X_FRONT_EMS_SWITCH,
	X_RIGHT_EMS_SWITCH,
	X_PC_RACK_EMS_SWITCH,
	X_LEFT_EMS_SWITCH,
	X_UTIL_BOX_TEMP_ALARM,
	X_UTIL_BOX_FIRE_ALARM,
	X_016,
	X_SNC_SMPS1_ON_CHECK,
	X_SNC_SMPS2_ON_CHECK,
	X_C_BOX_A_TEMP_ALARM,
	X_C_BOX_A_FIRE_ALARM,
	X_01B,
	X_OP_PC_TEMP_ALARM,
	X_MC_ON_CHECK,
	X_SIGNAL_PC_TEMP_ALARM,
	X_01F,


	// X0020~X002F
	X_SHUTTLE_1_VACCUM_ON_SW,
	X_SHUTTLE_1_VACCUM_OFF_SW,
	X_SHUTTLE_1_PATTERN_BACK_SW,
	X_SHUTTLE_1_PATTERN_NEXT_SW,
	X_SHUTTLE_1_PATTERN_ONOFF_SW,
	X_SHUTTLE_1_VACCUM_READY_SW,
	X_SHUTTLE_1_PATTERN_READY_SW,
	X_027,
	X_SHUTTLE_2_VACCUM_ON_SW,
	X_SHUTTLE_2_VACCUM_OFF_SW,
	X_SHUTTLE_2_PATTERN_BACK_SW,
	X_SHUTTLE_2_PATTERN_NEXT_SW,
	X_SHUTTLE_2_PATTERN_ONOFF_SW,
	X_SHUTTLE_2_VACCUM_READY_SW,
	X_SHUTTLE_2_PATTERN_READY_SW,
	X_02F,

	// X0030~X003F
	X_SHUTTLE_3_VACCUM_ON_SW,
	X_SHUTTLE_3_VACCUM_OFF_SW,
	X_SHUTTLE_3_PATTERN_BACK_SW,
	X_SHUTTLE_3_PATTERN_NEXT_SW,
	X_SHUTTLE_3_PATTERN_ONOFF_SW,
	X_SHUTTLE_3_VACCUM_READY_SW,
	X_SHUTTLE_3_PATTERN_READY_SW,
	X_037,
	X_MCR1_READY_SIGNAL,
	X_MCR2_READY_SIGNAL,
	X_MCR3_READY_SIGNAL,
	X_MCR4_READY_SIGNAL,
	X_MCR5_READY_SIGNAL,
	X_MCR6_READY_SIGNAL,
	X_03E,
	X_03F,

	// X0040~X004F
	X_SHUTTLE1_CH1_VACCUM_ON_SENSOR,
	X_SHUTTLE1_CH2_VACCUM_ON_SENSOR,
	X_SHUTTLE2_CH3_VACCUM_ON_SENSOR,
	X_SHUTTLE2_CH4_VACCUM_ON_SENSOR,
	X_SHUTTLE3_CH5_VACCUM_ON_SENSOR,
	X_SHUTTLE3_CH6_VACCUM_ON_SENSOR,
	X_046,
	X_047,
	X_048,
	X_049,
	X_04A,
	X_04B,
	X_MAIN_AIR_PRESURE_SENSOR,
	X_C_BOX_B_TEMP_ALARM,
	X_C_BOX_B_FIRE_ALARM,
	X_04F,

	// X0050~X005F
	X_050,
	X_051,
	X_052,
	X_053,
	X_054,
	X_055,
	X_056,
	X_057,
	X_HOT_LINE_PDT_ALIVE,
	X_HOT_LINE_PDT_EMERGENCY,
	X_HOT_LINE_PDT_NET_READY,
	X_HOT_LINE_PDT_DOOR_OPEN,
	X_HOT_LINE_PDT_INTERLOCK,
	X_HOT_LINE_PDT_INTERACTIVE_2,
	X_HOT_LINE_PDT_INTERACTIVE_3,
	X_HOT_LINE_PDT_SUB_EMO,

	// X0060~X006F
	X_C_BOX_B_FAN1_ALARM,
	X_C_BOX_B_FAN2_ALARM,
	X_C_BOX_B_FAN3_ALARM,
	X_C_BOX_B_FAN4_ALARM,
	X_C_BOX_A_FAN1_ALARM,
	X_C_BOX_A_FAN2_ALARM,
	X_C_BOX_A_FAN3_ALARM,
	X_C_BOX_A_FAN4_ALARM,
	X_UTIL_BOX_FAN1_ALARM,
	X_UTIL_BOX_FAN2_ALARM,
	X_LEFT_PC_RACK_FAN1_ALARM,
	X_LEFT_PC_RACK_FAN2_ALARM,
	X_LEFT_PC_RACK_FAN3_ALARM,
	X_LEFT_PC_RACK_FAN4_ALARM,
	X_FIGHT_PC_RACK_FAN1_ALARM,
	X_FIGHT_PC_RACK_FAN2_ALARM,

	// X0070~X007F
	X_FIGHT_PC_RACK_FAN3_ALARM,
	X_FIGHT_PC_RACK_FAN4_ALARM,
	X_072,
	X_073,
	X_074,
	X_075,
	X_076,
	X_077,
	X_078,
	X_079,
	X_07A,
	X_07B,
	X_07C,
	X_07D,
	X_07E,
	X_07F,


	MAX_IN_ID
};

enum OUTPUT_ID
{
	// Y0000~X000F
	Y_FRONT_DOOR1_LOCK_ONOFF,
	Y_FRONT_DOOR2_LOCK_ONOFF,
	Y_RIGNT_DOOR_LOCK_ONOFF,
	Y_BACK_DOOR1_LOCK_ONOFF,
	Y_BACK_DOOR2_LOCK_ONOFF,
	Y_LEFT_DOOR_LOCK_ONOFF,
	Y_OP_RESET_LAMP,
	Y_007,
	Y_SHUTTLE_1_LIGHT_CURTAIN_MUTING_LAMP,
	Y_SHUTTLE_1_LIGHT_MUTING_ON_TO_SNC,
	Y_SHUTTLE_2_LIGHT_CURTAIN_MUTING_LAMP,
	Y_SHUTTLE_2_LIGHT_MUTING_ON_TO_SNC,
	Y_SHUTTLE_3_LIGHT_CURTAIN_MUTING_LAMP,
	Y_SHUTTLE_3_LIGHT_MUTING_ON_TO_SNC,
	Y_00E,
	Y_00F,

// Y0010~Y001F
	Y_MCR1_RESET,
	Y_MCR2_RESET,
	Y_MCR3_RESET,
	Y_MCR4_RESET,
	Y_MCR5_RESET,
	Y_MCR6_RESET,
	Y_016,
	Y_017,
	Y_018,
	Y_019,
	Y_MCR1_TRIGGER_ONOFF,
	Y_MCR2_TRIGGER_ONOFF,
	Y_MCR3_TRIGGER_ONOFF,
	Y_MCR4_TRIGGER_ONOFF,
	Y_MCR5_TRIGGER_ONOFF,
	Y_MCR6_TRIGGER_ONOFF,

	// Y0020~X002F
	Y_SHUTTLE_1_VACCUM_ON_SW_LAMP,
	Y_SHUTTLE_1_VACCUM_OFF_SW_LAMP,
	Y_SHUTTLE_1_PATTERN_BACK_SW_LAMP,
	Y_SHUTTLE_1_PATTERN_NEXT_SW_LAMP,
	Y_SHUTTLE_1_PATTERN_ONOFF_SW_LAMP,
	Y_025,
	Y_026,
	Y_027,
	Y_SHUTTLE_2_VACCUM_ON_SW_LAMP,
	Y_SHUTTLE_2_VACCUM_OFF_SW_LAMP,
	Y_SHUTTLE_2_PATTERN_BACK_SW_LAMP,
	Y_SHUTTLE_2_PATTERN_NEXT_SW_LAMP,
	Y_SHUTTLE_2_PATTERN_ONOFF_SW_LAMP,
	Y_02D,
	Y_02E,
	Y_02F,

	// Y0030~X003F
	Y_SHUTTLE_3_VACCUM_ON_SW_LAMP,
	Y_SHUTTLE_3_VACCUM_OFF_SW_LAMP,
	Y_SHUTTLE_3_PATTERN_BACK_SW_LAMP,
	Y_SHUTTLE_3_PATTERN_NEXT_SW_LAMP,
	Y_SHUTTLE_3_PATTERN_ONOFF_SW_LAMP,
	Y_035,
	Y_036,
	Y_037,
	Y_TOWER_LAMP_RED,
	Y_TOWER_LAMP_YELLOW,
	Y_TOWER_LAMP_GREEN,
	Y_BUZZER_K1,
	Y_BUZZER_K2,
	Y_BUZZER_K3,
	Y_BUZZER_K4,
	Y_BUZZER_K5,

	// Y0040~Y004F
	Y_SIGNAL_PC1_RESET,
	Y_SIGNAL_PC2_RESET,
	Y_SIGNAL_PC3_RESET,
	Y_SIGNAL_PC4_RESET,
	Y_SIGNAL_PC5_RESET,
	Y_SIGNAL_PC6_RESET,
	Y_046,
	Y_047,
	Y_048,
	Y_049,
	Y_04A,
	Y_04B,
	Y_04C,
	Y_04D,
	Y_04E,
	Y_04F,

	// Y0050~Y005F
	SHUTTLE1_CH1_VACCUM_ONOFF,
	SHUTTLE1_CH2_VACCUM_ONOFF,
	SHUTTLE2_CH3_VACCUM_ONOFF,
	SHUTTLE2_CH4_VACCUM_ONOFF,
	SHUTTLE3_CH5_VACCUM_ONOFF,
	SHUTTLE3_CH6_VACCUM_ONOFF,
	Y_056,
	Y_057,
	Y_HOT_LINE_MTP_ALIVE,
	Y_HOT_LINE_MTP_EMERGENCY,
	Y_HOT_LINE_MTP_NET_READY,
	Y_HOT_LINE_MTP_DOOR_OPEN,
	Y_HOT_LINE_MTP_INTERLOCK,
	Y_HOT_LINE_MTP_INTERACTIVE_2,
	Y_HOT_LINE_MTP_INTERACTIVE_3,
	Y_HOT_LINE_MTP_SUB_EMO,

	MAX_OUT_ID
};

class CIOParam
{
public:

	enum CHECK_TYPE
	{
		CHECK_TYPE_B = 0,		// Input일 경우 B접은 Off되어야 감지. Output일 경우 Off해야 동작
		CHECK_TYPE_A = 1,		// Input일 경우 A접은 On되어야 감지. Output일 경우 On해야 동작
		CHECK_TYPE_MAX
	};

	CIOParam(void);
	~CIOParam(void);

	CString m_strIOAddress;
	CString m_strIOName;
	CString m_strIORemark;
	
	CHECK_TYPE m_Check;	// A접인지 B접인지에 따라 TRUE, FALSE로 구분된다

	BOOL ReturnOn();
	BOOL ReturnOff();

	BOOL ReturnFrom(VAC_STATE vac);
	BOOL ReturnFrom(CYL_STATE cyl);
	BOOL GetIOCheck(ONOFF value);
	BOOL GetIOCheck(BOOL bValue);
};

class CIOParamBank
{
public:
	CIOParamBank(void);
	~CIOParamBank(void);

	CIOParam m_In[MAX_IN_ID];
	CIOParam m_Out[MAX_OUT_ID];

	void InitializeIOParam();
	void InitializeIOParam_IN();
	void InitializeIOParam_OUT();

	CIOParam GetInputIOParma(INPUT_ID ID);
	CIOParam GetOutputIOParma(OUTPUT_ID ID);
};

